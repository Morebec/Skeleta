// This file contains all the mixins used in Skeleta


/** 
 * Allows applying css rules based on some screen size as defined by 'xs', 'sm', 'md', 'lg', 'xl' and '2x'.
 * The rules provided will apply from the breakpoint and "above". 
 * The only exception being, 'xs' which will apply the rules from 'xs' to anything smaller.
 * Usage @include sklApplyAfterBreakpoint(sm) { rule: value; } 
 */
@mixin sklApplyAfterBreakpoint($class) {
    $size: map-get($skl-screen-sizes, $class);

    @media screen and (min-width: $size) {
        @content;
    }
}

/** 
 * Allows applying css rules based on some screen size as defined by 'xs', 'sm', 'md', 'lg', 'xl' and '2x'.
 * The rules provided will apply from the breakpoint and "under". 
 * The only exception being, 'xs' which will apply the rules from 'xs' to anything smaller.
 * Usage @include applyBeforeBreakpoint(sm) { rule: value; } 
 */
@mixin sklApplyBeforeBreakpoint($class) {
    $size: map-get($skl-screen-sizes, $class);

    @media screen and (max-width: $size) {
        @content;
    }
}

/**
 * This mixin allows defining a CSS custom property that will be correctly prefixed.
 */
@mixin sklNewVar($name, $value) {
    $propName: sklVarName($name);
    #{$propName}: #{$value};
}

/**
 * This function returns the prefixed name of a CSS custom property.
 */
@function sklVarName($name) {
    @return --#{$skl-varPrefix}#{$name};
}

/**
 * This function returns the value var(--my-var) of a given CSS custom property and ensuring
 * it is correctly prefixed.
 */
@function sklGetVar($name) {
    @return var(sklVarName($name));
}

/**
 * This mixin allows to easily define a component's styling rules.
 * It ensures the component's name is properly prefixed and will generate variants
 * of the component rules for each breakpoint.
 */
@mixin sklComponent($name) {
    $componentName: sklGetComponentName($name);


   // Define a placeholder for the style so that it can be reused
   // on custom html tags using Sass.
   // The name of the palce holder is %<component prefix><component name>
   $placeholderName: $componentName;
    %#{$placeholderName} {
        max-inline-size: none;
        @content;
    }

    // Define a stand alone rule that can be used outside of skeleta components.
    @if $skl-generateStandaloneRules {
        $className: $componentName;
        .#{$className} {
            @extend %#{$placeholderName};
        }
    }

    // Define a style for the custom skeleta component
    @if $skl-generateComponentRules {   
        #{$componentName} {
            @extend %#{$placeholderName};
        }
    }
    

    // Do the same for each screen size
    // @each $breakpoint, $size in $skl-screen-sizes {
        // $scopedClassName: "#{$breakpoint}\\:#{$componentName}";
//         
        // %#{$skl-prefix}#{$scopedClassName} {
            // @include sklApplyAfterBreakpoint($breakpoint) {
                // @content;
            // }
        // }
// 
        // .#{$skl-prefix}#{$scopedClassName} {
            // @include sklApplyAfterBreakpoint($breakpoint) {
                // @content;
            // }
        // }
    // }
}

/**
 * Returns the name of a component with its prefix.
 */
@function sklGetComponentName($name) {
    @return #{$skl-componentPrefix}#{$name};
}

/**
 * This mixin allows to easily define a component modifier's styling rules.
 * It ensures the the modifier's name is properly prefixed the component's name and modifier 
 * prefix.
 * If the modifier does not apply to a specific component, simply pass "" as the component name.
 * Note: this mixin is not intended to be nested within a component when used.
 */
@mixin sklModifier($componentName, $name) {   
    $componentName: sklGetComponentName($componentName);

    // Define a placeholder.
    // placeholder names are defined as
    // %<component prefix><component name>--<modifier name>
    // e.g.: %skl-stack--gap0
    $placeholderName: #{$componentName}--#{$name};
    %#{$placeholderName} {
        @content;
    }

    // Define a stand alone class that allows reusing the styles outside of skeleta components.
    // .<component prefix><component name>--<modifier name>
    // e.g.: .skl-stack--gap0
    @if $skl-generateStandaloneRules {
        $className: #{$componentName}--#{$name};
        .#{$componentName}.#{$className} {
            @extend %#{$placeholderName};
        }
    }

    // Define a class that applies to the skl component.
    @if $skl-generateComponentRules {

        #{$componentName}.#{$name} {
            @extend %#{$placeholderName};
        }
    }
    
    // Define a rule that applies to the component 
    // e.g. <skl-stack class="gap0"></skl-stack>


    // Do the same for each breakpoints.
    // @each $breakpoint, $size in $skl-screen-sizes {
        // $scopedClassName: "#{$breakpoint}\\:#{$className}";
        // %#{$skl-prefix}#{$scopedClassName} {
            // @include sklApplyAfterBreakpoint($breakpoint) {
                // @content;
            // }
        // }
// 
        // .#{$skl-prefix}#{$scopedClassName} {
            // @include sklApplyAfterBreakpoint($breakpoint) {
                // @content;
            // }
        // }
    // }
}

/**
 * Defines a modifier for the flex "gap" property based on the unit scale for a given component.
 */
@mixin sklGapModifier($componentName) {
    @for $i from $skl-minUnitScaleValue through $skl-maxUnitScaleValue {
        @include sklModifier($componentName, gap#{$i}) {
            gap: sklGetVar(unit#{$i});
        }
    }
}

/**
 * Defines a modifier for the flex "justify" property based on the unit scale for a given component.
 */
@mixin sklJustifyModifier($componentName) {
    @each $i in 'space-between', 'space-around', 'space-evenly', 'start', 'end', 'center' {
        @include sklModifier($componentName, justify-#{$i}) {
            justify-content: #{$i};
        }
    }
}

/**
 * Defines a modifier for the flex "align" property based on the unit scale for a given component.
 */
@mixin sklAlignModifier($componentName) {
    @each $i in 'stretch', 'start', 'end', 'center' {
        @include sklModifier($componentName, align-#{$i}) {
            align-content: #{$i};
        }
    }
}

/**
 * Defines a modifier for the "flex-basis" property for a given component using fractions.
 * E.g.:
 * @include sklFlexBasisModifier('col', 3);
 * will produce the following classes:
 * - .col--basis-1/3 {flex-basis: 33.33334%;}
 * - .col--basis-2/3 {flex-basis: 66.33334%;}
 * - .col--basis-full {flex-basis: 100%;}
 */
@mixin sklFlexBasisModifier($componentName) {
    $important: "";
    @if $componentName == "" {
        $important: "!important";
    }
    @each $denom in 2,3,4,5,6,12 {
        @for $i from 1 to $denom {
            @include sklModifier($componentName, basis-#{$i}\/#{$denom}) {
                flex-basis: calc($i/$denom) * 100% #{$important};
            }
        }
    }

    // Generate the full flex-basis
    @include sklModifier($componentName, basis-full) {
        flex-basis: 100% #{$important};
    }
}

/**
 * Generates modifiers that allow giving padding to a given component.
 * It generates padding classes based on the unitScale.
 */
@mixin sklPaddingModifier($componentName) {
    @for $i from $skl-minUnitScaleValue through $skl-maxUnitScaleValue {
        @include sklModifier($componentName, padding#{$i}) {
            padding: sklGetVar(unit#{$i});
        }

        // horizontal padding (left-right)
        @include sklModifier($componentName, padding-x#{$i}) {
            padding-left: sklGetVar(unit#{$i});
            padding-right: sklGetVar(unit#{$i});
        }

        // vertical padding (top-bottom)
        @include sklModifier($componentName, padding-y#{$i}) {
            padding-top: sklGetVar(unit#{$i});
            padding-bottom: sklGetVar(unit#{$i});
        }
    }
}